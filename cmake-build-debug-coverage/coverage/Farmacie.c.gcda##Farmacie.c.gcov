        -:    0:Source:C:/Users/Blajan David/faculta/sem 2-oop/farmacie2/Farmacie.c
        -:    0:Graph:C:\Users\Blajan David\faculta\sem 2-oop\farmacie2\cmake-build-debug-coverage\CMakeFiles\farmacie2.dir\Farmacie.c.gcno
        -:    0:Data:C:\Users\Blajan David\faculta\sem 2-oop\farmacie2\cmake-build-debug-coverage\CMakeFiles\farmacie2.dir\Farmacie.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Blajan David on 3/9/2024.
        -:    3://
        -:    4:#include "Farmacie.h"
        -:    5:#include <assert.h>
        -:    6:#include <string.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:/**
        -:   10: * constructor for farmacie
        -:   11: * @return far - array of meds
        -:   12: */
function createFarmacie called 12 returned 100% blocks executed 100%
       12:   13:Farmacie* createFarmacie(){
       12:   14:    Farmacie* far = malloc(sizeof(Farmacie));
       12:   15:    far->len = 0;
       12:   16:    far->maxCapacity = 1;
       12:   17:    far->elems = malloc(sizeof(Medicament) * far->maxCapacity);
       12:   18:    return far;
       12:   18-block  0
        -:   19:}
        -:   20:
        -:   21:/**
        -:   22: * destructor for farmacie
        -:   23: */
function destroyFarmacie called 8 returned 100% blocks executed 100%
        8:   24:void destroyFarmacie(Farmacie* far){
       26:   25:    for(int i=0;i<size(far);i++)
        8:   25-block  0
       26:   25-block  1
call    0 returned 26
branch  1 taken 18
branch  2 taken 8 (fallthrough)
       18:   26:        destroyMed(far->elems[i]);
       18:   26-block  0
call    0 returned 18
        8:   27:    free(far->elems);
        8:   28:    free(far);
        8:   29:}
        -:   30:
        -:   31:/**
        -:   32: * function to resize the array
        -:   33: * @param far - Farmacie
        -:   34: */
function resize called 13 returned 100% blocks executed 100%
       13:   35:void resize(Farmacie* far){
       13:   36:    ElemType* meds = malloc(sizeof(Medicament) * far->maxCapacity * 2);
       29:   37:    for(int i=0;i<size(far);i++)
       13:   37-block  0
       29:   37-block  1
call    0 returned 29
branch  1 taken 16
branch  2 taken 13 (fallthrough)
       16:   38:        meds[i] = far->elems[i];
       16:   38-block  0
       13:   39:    free(far->elems);
       13:   40:    far->maxCapacity = 2 * far->maxCapacity;
       13:   41:    far->elems = meds;
       13:   42:}
        -:   43:
        -:   44:/**
        -:   45: * repo function to get an element from the array
        -:   46: * @param farmacie - Farmacie*, array of meds
        -:   47: * @param poz - int, index of the element you want to return
        -:   48: * @return element at the poz index - Medicament type
        -:   49: */
function getElement called 127 returned 100% blocks executed 100%
      127:   50:ElemType getElement(Farmacie* far, int poz){
      127:   51:    return far->elems[poz];
      127:   51-block  0
        -:   52:}
        -:   53:
        -:   54:/**
        -:   55: * repo function to get the size of the array
        -:   56: * @param farmacie - Farmacie*, array of meds
        -:   57: * @return size of array - int
        -:   58: */
function size called 211 returned 100% blocks executed 100%
      211:   59:int size(Farmacie* far){
      211:   60:    return far->len;
      211:   60-block  0
        -:   61:}
        -:   62:
        -:   63:/**
        -:   64: * repo function to add an element to the array, adds the element to the end of the array
        -:   65: * if an element with the same id doesnt exist, or increments the amount otherwise
        -:   66: * @param farmacie - Farmacie*, array of meds
        -:   67: * @param med - Medicament*
        -:   68: */
function addMed called 28 returned 100% blocks executed 100%
       28:   69:void addMed(Farmacie* far, ElemType med){
       50:   70:    for (int i = 0; i < size(far); i++)
       28:   70-block  0
       22:   70-block  1
       50:   70-block  2
call    0 returned 50
branch  1 taken 24
branch  2 taken 26 (fallthrough)
       24:   71:        if (getId(med) == getId(getElement(far, i))){
       24:   71-block  0
call    0 returned 24
call    1 returned 24
call    2 returned 24
branch  3 taken 2 (fallthrough)
branch  4 taken 22
        2:   72:            setAmount(getElement(far, i), getAmount(getElement(far, i)) + getAmount(med));
        2:   72-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 returned 2
        2:   73:            destroyMed(med);
call    0 returned 2
        2:   74:            return;
        -:   75:        }
       26:   76:    if (far->len == far->maxCapacity)
       26:   76-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 13
       13:   77:        resize(far);
       13:   77-block  0
call    0 returned 13
       26:   78:    far->elems[size(far)] = med;
       26:   78-block  0
call    0 returned 26
       26:   79:    far->len++;
        -:   80:}
        -:   81:
        -:   82:/**
        -:   83: * repo function to get all the items in the array
        -:   84: * @param farmacie - Farmacie*, array of meds
        -:   85: * @return far - Farmacie*, array of meds
        -:   86: */
function getAll called 3 returned 100% blocks executed 100%
        3:   87:Farmacie* getAll(Farmacie* far){
        3:   88:    return far;
        3:   88-block  0
        -:   89:}
        -:   90:
        -:   91:/**
        -:   92: * repo function to change an element in the array, changes the name and concentration
        -:   93: * if an element with the given id exist, throws error otherwise
        -:   94: * @param farmacie - Farmacie*, array of meds
        -:   95: * @param med - Medicament*
        -:   96: * @return 1 - if the element doesnt exist
        -:   97: *         0 - if everything went well
        -:   98: */
function changeMed called 4 returned 100% blocks executed 100%
        4:   99:int changeMed(Farmacie* far, ElemType med){
        7:  100:    for (int i=0; i<size(far); i++){
        4:  100-block  0
        3:  100-block  1
        7:  100-block  2
call    0 returned 7
branch  1 taken 6
branch  2 taken 1 (fallthrough)
        6:  101:        if (getId(med) == getId(getElement(far, i))){
        6:  101-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
branch  3 taken 3 (fallthrough)
branch  4 taken 3
        -:  102:            int nr;
        -:  103:
        3:  104:            nr = strlen(getName(med)) + 1;
        3:  104-block  0
call    0 returned 3
        3:  105:            free(far->elems[i]->nume);
        3:  106:            far->elems[i]->nume = malloc(sizeof(char) * nr);
        3:  107:            strcpy_s(far->elems[i]->nume, nr, getName(med));
call    0 returned 3
call    1 returned 3
        -:  108:
        3:  109:            nr = strlen(getConcentration(med)) + 1;
call    0 returned 3
        3:  110:            free(far->elems[i]->concentratie);
        3:  111:            far->elems[i]->concentratie = malloc(sizeof(char) * nr);
        3:  112:            strcpy_s(far->elems[i]->concentratie, nr, getConcentration(med));
call    0 returned 3
call    1 returned 3
        3:  113:            return 0;
        -:  114:        }
        -:  115:    }
        1:  116:    return 1;
        1:  116-block  0
        -:  117:}
        -:  118:
        -:  119:/**
        -:  120: * repo function to delete an element in the array, set the amount to 0, moves it to the back
        -:  121: * of the array and descreses the length if the item exist, throws error otherwise
        -:  122: * @param farmacie - Farmacie*, array of meds
        -:  123: * @param id - int,>0
        -:  124: * @return 1 - if the element doesnt exist
        -:  125: *         0 - if everything went well
        -:  126: */
function deleteMed called 3 returned 100% blocks executed 100%
        3:  127:int deleteMed(Farmacie* far,int id){
        4:  128:    for (int i=0;i<size(far);i++)
        3:  128-block  0
        1:  128-block  1
        4:  128-block  2
call    0 returned 4
branch  1 taken 3
branch  2 taken 1 (fallthrough)
        3:  129:        if (id == getId(getElement(far, i))){
        3:  129-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 2 (fallthrough)
branch  3 taken 1
        2:  130:            destroyMed(far->elems[i]);
        2:  130-block  0
call    0 returned 2
        6:  131:            for(int j=i;j<size(far);j++)
        6:  131-block  0
call    0 returned 6
branch  1 taken 4
branch  2 taken 2 (fallthrough)
        4:  132:                far->elems[j] = far->elems[j+1];
        4:  132-block  0
        2:  133:            far->len--;
        2:  134:            return 0;
        2:  134-block  0
        -:  135:        }
        1:  136:    return 1;
        1:  136-block  0
        -:  137:}
        -:  138:
        -:  139:/**
        -:  140: * Functions for testing
        -:  141: */
        -:  142:
function testAddFarmacie called 1 returned 100% blocks executed 84%
        1:  143:void testAddFarmacie(){
        1:  144:    Farmacie* far = createFarmacie();
        1:  144-block  0
call    0 returned 1
        1:  145:    addMed(far, createMed(1,"paracetamol", "70%", 10));
call    0 returned 1
call    1 returned 1
        1:  146:    addMed(far, createMed(2, "xanax", "50%", 4));
call    0 returned 1
call    1 returned 1
       1*:  147:    assert (size(far)==2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  147-block  0
call    3 never executed
        1:  147-block  1
        1:  148:    Medicament* med1 = getElement(far, 0);
        1:  148-block  0
call    0 returned 1
       1*:  149:    assert (strcmp(getName(med1), "paracetamol") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  149-block  0
call    3 never executed
        1:  149-block  1
        1:  150:    Medicament* med2 = getElement(far, 1);
        1:  150-block  0
call    0 returned 1
       1*:  151:    assert (strcmp(getName(med2),"xanax")==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  151-block  0
call    3 never executed
        1:  151-block  1
        1:  152:    addMed(far, createMed(1,"paracetamol","70%",10));
        1:  152-block  0
call    0 returned 1
call    1 returned 1
        1:  153:    Medicament* med3 = getElement(far, 0);
call    0 returned 1
       1*:  154:    assert(size(far)==2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  154-block  0
call    3 never executed
        1:  154-block  1
       1*:  155:    assert(getAmount(med3)==20);
        1:  155-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  155-block  1
call    3 never executed
        1:  155-block  2
        1:  156:    destroyFarmacie(far);
        1:  156-block  0
call    0 returned 1
        1:  157:}
        -:  158:
function testChangeFarmacie called 1 returned 100% blocks executed 83%
        1:  159:void testChangeFarmacie(){
        1:  160:    Farmacie *far = createFarmacie();
        1:  160-block  0
call    0 returned 1
        1:  161:    addMed(far, createMed(1,"paracetamol", "70%", 10));
call    0 returned 1
call    1 returned 1
        1:  162:    addMed(far, createMed(2, "xanax", "50%", 4));
call    0 returned 1
call    1 returned 1
       1*:  163:    assert (size(far)==2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  163-block  0
call    3 never executed
        1:  163-block  1
        1:  164:    Farmacie* med = getAll(far);
        1:  164-block  0
call    0 returned 1
       1*:  165:    assert(size(med)==2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  165-block  0
call    3 never executed
        1:  165-block  1
        1:  166:    Medicament* med1 = getElement(far, 0);
        1:  166-block  0
call    0 returned 1
       1*:  167:    assert (strcmp(getName(med1), "paracetamol") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  167-block  0
call    3 never executed
        1:  167-block  1
        1:  168:    Medicament* med2 = getElement(far, 1);
        1:  168-block  0
call    0 returned 1
       1*:  169:    assert (strcmp(getName(med2),"xanax")==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  169-block  0
call    3 never executed
        1:  169-block  1
        1:  170:    Medicament* medChange1 = createMed(1, "nurofen", "30%", 10);
        1:  170-block  0
call    0 returned 1
        1:  171:    changeMed(far, medChange1);
call    0 returned 1
        1:  172:    Medicament* medChange2 = createMed(2, "strepsils", "55%", 4);
call    0 returned 1
        1:  173:    changeMed(far, medChange2);
call    0 returned 1
       1*:  174:    assert (size(far)==2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  174-block  0
call    3 never executed
        1:  174-block  1
        1:  175:    Medicament* med3 = getElement(far, 0);
        1:  175-block  0
call    0 returned 1
       1*:  176:    assert (strcmp(getName(med3), "nurofen") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  176-block  0
call    3 never executed
        1:  176-block  1
       1*:  177:    assert (strcmp(getConcentration(med3), "30%")==0);
        1:  177-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  177-block  1
call    3 never executed
        1:  177-block  2
        1:  178:    Medicament* med4 = getElement(far, 1);
        1:  178-block  0
call    0 returned 1
       1*:  179:    assert (strcmp(getName(med4),"strepsils")==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  179-block  0
call    3 never executed
        1:  179-block  1
       1*:  180:    assert (strcmp(getConcentration(med4), "55%") == 0);
        1:  180-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  180-block  1
call    3 never executed
        1:  180-block  2
        1:  181:    destroyMed(medChange1);
        1:  181-block  0
call    0 returned 1
        1:  182:    destroyMed(medChange2);
call    0 returned 1
        1:  183:    destroyFarmacie(far);
call    0 returned 1
        1:  184:}
        -:  185:
function testDeleteFarmacie called 1 returned 100% blocks executed 88%
        1:  186:void testDeleteFarmacie(){
        1:  187:    Farmacie* far = createFarmacie();
        1:  187-block  0
call    0 returned 1
        1:  188:    addMed(far, createMed(1,"paracetamol", "70%", 10));
call    0 returned 1
call    1 returned 1
        1:  189:    addMed(far, createMed(2, "xanax", "50%", 4));
call    0 returned 1
call    1 returned 1
       1*:  190:    assert (size(far)==2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  190-block  0
call    3 never executed
        1:  190-block  1
        1:  191:    deleteMed(far, 1);
        1:  191-block  0
call    0 returned 1
       1*:  192:    assert(size(far)==1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  192-block  0
call    3 never executed
        1:  192-block  1
        1:  193:    destroyFarmacie(far);
        1:  193-block  0
call    0 returned 1
        1:  194:}
